#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.69])
AC_INIT()
AM_INIT_AUTOMAKE([-Wall -Werror])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([libavl/avl.c])
AC_CONFIG_HEADERS([libavl/config.h])

VERSION_MAJOR=___MAJOR___
VERSION_MINOR=___MINOR___
VERSION_BUILD=___BUILD___

AC_SUBST(VERSION_MAJOR)
AC_SUBST(VERSION_MINOR)
AC_SUBST(VERSION_BUILD)

# Checks for programs.
AC_PROG_CC
AM_PROG_AR
AC_PROG_INSTALL
AC_PROG_MAKE_SET
LT_INIT

# Checks for libraries.
AC_ARG_ENABLE(debug,
              AS_HELP_STRING([--enable-debug],
                             [enable debugging [default: no]]),
              [case "${enableval}" in
                yes) debug=true ;;
                no)  debug=false ;;
                *) AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
              esac],
              [debug=false])
AM_CONDITIONAL(DEBUG, test "x$debug" = "xtrue")
AM_COND_IF(DEBUG,
           AC_DEFINE(LIBAVL_DEBUG, 1, [Define to 0 if this is a release build]),
           AC_DEFINE(LIBAVL_DEBUG, 0, [Define to 1 or higher if this is a debug build]))
AC_ARG_ENABLE(log,
              AS_HELP_STRING([--enable-log],
                             [enable log with level from 0 to 5 [default: 0]]),
              [case "${enableval}" in
                0|1|2|3|4|5) log=${enableval} ;;
                *) AC_MSG_ERROR([bad value ${enableval} for --enable-log]) ;;
              esac],
              [log=0])
AM_CONDITIONAL(FUNLOG, test $log -ge 5)
AM_CONDITIONAL(DEBLOG, test $log -eq 4)
AM_CONDITIONAL(INFLOG, test $log -eq 3)
AM_CONDITIONAL(WARLOG, test $log -eq 2)
AM_CONDITIONAL(ERRLOG, test $log -eq 1)

AM_COND_IF(FUNLOG,
    [AC_DEFINE(LOGLEVEL, 5, [Define log level of application from 0 (no log) to 5 (enter function log)])],
    [AM_COND_IF(DEBLOG,
        [AC_DEFINE(LOGLEVEL, 4, [Define log level of application from 0 (no log) to 5 (enter function log)])],
        [AM_COND_IF(INFLOG,
            [AC_DEFINE(LOGLEVEL, 3, [Define log level of application from 0 (no log) to 5 (enter function log)])],
            [AM_COND_IF(WARLOG,
                [AC_DEFINE(LOGLEVEL, 2, [Define log level of application from 0 (no log) to 5 (enter function log)])],
                [AM_COND_IF(ERRLOG,
                    [AC_DEFINE(LOGLEVEL, 1, [Define log level of application from 0 (no log) to 5 (enter function log)])],
                    [AC_DEFINE(LOGLEVEL, 0, [Define log level of application from 0 (no log) to 5 (enter function log)])]
                )]
            )]
        )]
    )]
)




# Checks for header files.
AC_CHECK_HEADERS([stdio.h stddef.h stdlib.h string.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_INLINE
AC_TYPE_SIZE_T
AC_CHECK_HEADER_STDBOOL
AC_CHECK_TYPES([ptrdiff_t size_t])

# Checks for library functions.
AC_FUNC_MALLOC
AC_CHECK_FUNC([memcpy printf])

AC_CONFIG_FILES([Makefile
                 libavl/Makefile
                 libavl/unitTests/Makefile
                 libavl/avl.pc])
AC_OUTPUT
